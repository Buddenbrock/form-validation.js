"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ErrorController = function ErrorController() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, ErrorController);

  _defineProperty(this, "getError", function (fieldset) {
    return fieldset.querySelector("." + _this.form.classes.error);
  });

  _defineProperty(this, "createError", function (input) {
    var error = document.createElement("div");
    error.className = _this.form.classes.error;
    error.setAttribute("role", "alert");
    error.innerText = input.dataset["msg"] !== undefined ? input.dataset["msg"] : _this.form.errorFallbackMessage;
    return error;
  });

  _defineProperty(this, "insertError", function (input, error) {
    var element = input,
        checkbox = input.dataset["rule"] === "checked",
        radio = input.dataset["rule"] === "radio",
        requiredBox = input.dataset["rule"] === "required",
        recaptcha = input.dataset["rule"] === "recaptcha";

    if (input.nextElementSibling) {
      if (checkbox || radio) {
        element = input.parentElement;
      } else if (requiredBox || recaptcha) {
        element = input.nextElementSibling;
      }
    }

    new HelperController(_this.form).insertAfter(error, element);
  });

  _defineProperty(this, "showError", function (input) {
    var fieldset = new HelperController(_this.form).getFieldset(input),
        error = _this.getError(fieldset);

    new HelperController(_this.form).addClassOnElement(fieldset, _this.form.classes.invalidField);

    if (error !== undefined && error !== null) {
      new HelperController(_this.form).removeClassOnElement(error, _this.form.classes.hideError);
    } else {
      error = _this.createError(input);

      _this.insertError(input, error);
    }
  });

  _defineProperty(this, "hideError", function (input) {
    var fieldset = new HelperController(_this.form).getFieldset(input),
        error = _this.getError(fieldset);

    new HelperController(_this.form).removeClassOnElement(fieldset, _this.form.classes.invalidField);

    if (error !== undefined && error !== null) {
      new HelperController(_this.form).removeClassOnElement(error, _this.form.classes.hideError);
      new HelperController(_this.form).addClassOnElement(error, _this.form.classes.hideError);
    }
  });

  this.form = options;
}
/**
 * @desc get error message wrapper inside given fieldset
 * @param fieldset
 * @returns {*}
 */
;
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HelperController = function HelperController() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, HelperController);

  _defineProperty(this, "getFieldset", function (input) {
    var fieldset = input.parentElement;

    while (!fieldset.classList.contains(_this.form.classes.fieldWrapper)) {
      fieldset = fieldset.parentElement;
    }

    return fieldset;
  });

  _defineProperty(this, "insertAfter", function (newNode, existingNode) {
    existingNode.parentNode.append(newNode);
  });

  _defineProperty(this, "addClassOnElement", function (element, classValue) {
    element.classList.add(classValue);
  });

  _defineProperty(this, "removeClassOnElement", function (element, classValue) {
    element.classList.remove(classValue);
  });

  this.form = options;
}
/**
 * @desc get fieldset of given field
 * @param input
 * @returns {HTMLElement}
 */
;
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RuleController = function RuleController() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, RuleController);

  _defineProperty(this, "validateSingleInput", function (input) {
    var rule = input.dataset["rule"],
        exp,
        inputError = false; // let required = input.dataset["required"];
    // @TODO: Add mechanic for checking if field is required or only checked if contains content
    // @TODO: Add expression to all validation types
    // @TODO: Add input:date
    // @TODO: Add input:datetime
    // @TODO: Add input:time
    // @TODO: Add input:month
    // @TODO: Add input:number
    // @TODO: Add input:url
    // @TODO: Add input:file
    // @TODO: Add input:range
    // @TODO: Add input:password
    // @TODO: Add input:password-verification
    // @TODO: Add input:email-verification
    // @TODO: Add input:range

    if (rule !== undefined) {
      var _rule$split = rule.split(":");

      var _rule$split2 = _slicedToArray(_rule$split, 2);

      rule = _rule$split2[0];
      exp = _rule$split2[1];

      switch (rule) {
        case "required":
          inputError = _this.ruleRequired(input, exp, inputError);
          break;

        case "minlen":
          inputError = _this.ruleMinLength(input, exp, inputError);
          break;

        case "email":
          inputError = _this.ruleEmail(input, exp, inputError);
          break;

        case "phone":
          inputError = _this.rulePhone(input, exp, inputError);
          break;

        case "checked":
          inputError = _this.ruleChecked(input, exp, inputError);
          break;

        case "radio":
          inputError = _this.ruleRadio(input, exp, inputError);
          break;

        case "selected":
          inputError = _this.ruleSelected(input, exp, inputError);
          break;

        case "regExp":
          inputError = _this.ruleExp(input, exp, inputError);
          break;

        case "recaptcha":
          inputError = _this.ruleRequired(input, exp, inputError);
          break;
      }

      if (inputError) {
        new ErrorController(_this.form).showError(input);
      } else {
        new ErrorController(_this.form).hideError(input);
      }
    }

    return inputError;
  });

  _defineProperty(this, "ruleRequired", function (input, exp, inputError) {
    if (input.value === "") {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "ruleMinLength", function (input, exp, inputError) {
    if (input.value.length < parseInt(exp)) {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "ruleEmail", function (input, exp, inputError) {
    if (!_this.form.expression.email.test(input.value)) {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "rulePhone", function (input, exp, inputError) {
    if (input.value.length > 0 && !_this.form.expression.phone.test(input.value)) {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "ruleChecked", function (input, exp, inputError) {
    if (!input.checked) {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "ruleRadio", function (input, exp, inputError) {
    var radioGroup = Array.from(document.querySelectorAll("[name=\"".concat(input.name, "\"]")));
    inputError = true;
    radioGroup.forEach(function (radio) {
      if (radio.checked) {
        inputError = false;
      }
    });
    return inputError;
  });

  _defineProperty(this, "ruleSelected", function (input, exp, inputError) {
    var value = input.options[input.selectedIndex].value;

    if (value === "") {
      inputError = true;
    }

    return inputError;
  });

  _defineProperty(this, "ruleExp", function (input, exp, inputError) {
    exp = new RegExp(exp);

    if (!exp.test(input.value)) {
      inputError = true;
    }

    return inputError;
  });

  this.form = options;
}
/**
 * @desc validate single given field
 * @param input
 * @returns {boolean}
 */
;
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FormValidation = function FormValidation() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, FormValidation);

  _defineProperty(this, "initValidation", function () {
    var inputEventListenerTypes = ["blur", "change", "keyup"];
    _this.form.element = document.querySelector('.' + _this.form.classes.formValidation);
    _this.form.inputs = _this.form.element.querySelectorAll('input, textarea, select');

    _this.getSubmitButton();

    _this.form.element.addEventListener("submit", _this.formSubmit.bind(_this));

    if (!_this.form.recaptcha.disabled && document.querySelector('.' + _this.form.recaptcha["class"])) {
      _this.initializeRecaptcha();
    }

    Array.from(_this.form.inputs).forEach(function (input) {
      inputEventListenerTypes.forEach(function (type) {
        input.addEventListener(type, _this.validateOnChange.bind(_this));
      });
    });
  });

  _defineProperty(this, "getSubmitButton", function () {
    _this.form.submitButton = _this.form.element.querySelector('button[type="submit"]');
  });

  _defineProperty(this, "formSubmit", function (event) {
    if (!_this.validateFormData()) {
      event.preventDefault();

      _this.focusFirstErrorField();
    }
  });

  _defineProperty(this, "focusFirstErrorField", function () {
    var formError = false;

    for (var i = 0; i < _this.form.inputs.length; i++) {
      if (new RuleController(_this.form).validateSingleInput(_this.form.inputs[i]) || formError) {
        _this.form.inputs[i].focus();

        break;
      }
    }
  });

  _defineProperty(this, "validateFormData", function () {
    var formError = false;
    Array.from(_this.form.inputs).forEach(function (input) {
      formError = new RuleController(_this.form).validateSingleInput(input) || formError;
    });
    return !formError;
  });

  _defineProperty(this, "validateOnChange", function (event) {
    new RuleController(_this.form).validateSingleInput(event.target);
  });

  _defineProperty(this, "initializeRecaptcha", function () {
    window.grecaptcha.ready(function () {
      _this.recaptcha = _this.form.element.querySelector('.' + _this.form.recaptcha["class"]);

      if (_this.recaptcha) {
        if (_this.recaptcha.childElementCount === 0) {
          window.grecaptcha.render(_this.recaptcha, _this.recaptcha.dataset);
        }

        window.recaptchaCallback = _this.setCaptchaValue.bind(_this);
        window.recaptchaExpiredCallback = _this.unsetCaptchaValue.bind(_this);
      }
    });
  });

  _defineProperty(this, "setCaptchaValue", function () {
    var input = _this.getRecaptchaField();

    if (input) {
      input.value = "1";
    }

    new RuleController(_this.form).validateSingleInput(input);
  });

  _defineProperty(this, "unsetCaptchaValue", function () {
    var input = _this.getRecaptchaField();

    if (input) {
      input.value = "";
    }

    new RuleController(_this.form).validateSingleInput(input);
  });

  _defineProperty(this, "getRecaptchaField", function () {
    var field,
        recaptchaElement = _this.form.element.querySelector('.' + _this.form.recaptcha["class"]);

    if (recaptchaElement) {
      field = document.getElementById(recaptchaElement.dataset["fieldId"]);
    }

    return field;
  });

  if (!options.classes) {
    options.classes = {};
  }

  if (!options.expression) {
    options.expression = {};
  }

  if (!options.expression.password) {
    options.expression.password = {};
  }

  if (!options.recaptcha) {
    options.recaptcha = {};
  }

  this.form = {
    // class settings
    classes: {
      formValidation: options.classes.formValidation || "validate",
      invalidField: options.classes.invalidField || "invalid",
      fieldWrapper: options.classes.fieldWrapper || "form-group",
      error: options.classes.error || "error",
      hideError: options.classes.hideError || "d-none"
    },
    // error messages
    errorFallbackMessage: options.errorFallbackMessage || "Please check this field",
    // field expressions
    expression: {
      email: options.expression.email || /^[^\s()<>@,;:\/]+@\w[\w.-]+\.[a-z]{2,}$/i,
      phone: options.expression.phone || /^[0-9]{2,5}( )?([0-9]{4,9})$/i,
      password: {
        passwordExp: options.expression.password.passwordExp || /^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+?><:{}[]$/i,
        passwordMinLen: options.expression.password.passwordMinLen || 6,
        passwordMaxLen: options.expression.password.passwordMaxLen || 20
      }
    },
    // google recaptcha
    recaptcha: {
      disabled: options.recaptcha.disabled || false,
      "class": options.recaptcha["class"] || "g-recaptcha"
    }
  };

  if (document.querySelector('.' + this.form.classes.formValidation)) {
    this.initValidation();
  }
}
/**
 * @desc init validation
 */
;